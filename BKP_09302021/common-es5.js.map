{"version":3,"sources":["webpack:///src/app/utilities/forbidden-name.directive.ts"],"names":["forbiddenNameValidator","nameRe","control","forbidden","test","value","forbiddenName","ForbiddenValidatorDirective","RegExp","provide","useExisting","multi","selector","providers"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAGA;;;AACO,aAASA,sBAAT,CAAgCC,MAAhC,EAA8C;AACnD,aAAO,UAACC,OAAD,EAA2D;AAChE,YAAMC,SAAS,GAAGF,MAAM,CAACG,IAAP,CAAYF,OAAO,CAACG,KAApB,CAAlB;AACA,eAAOF,SAAS,GAAG;AAACG,uBAAa,EAAE;AAACD,iBAAK,EAAEH,OAAO,CAACG;AAAhB;AAAhB,SAAH,GAA6C,IAA7D;AACD,OAHD;AAID;;QAMYE,2B;;;;;;;eAGX,kBAASL,OAAT,EAAiC;AAC/B,iBAAO,KAAKI,aAAL,GAAqBN,sBAAsB,CAAC,IAAIQ,MAAJ,CAAW,KAAKF,aAAhB,EAA+B,GAA/B,CAAD,CAAtB,CAA4DJ,OAA5D,CAArB,GACqB,IAD5B;AAED;;;;;;;uBANUK,2B;AAA2B,K;;;YAA3BA,2B;AAA2B,+C;AAAA;AAAA;AAAA,O;AAAA,kFAF3B,CAAC;AAACE,eAAO,EAAE,4DAAV;AAAyBC,mBAAW,EAAEH,2BAAtC;AAAmEI,aAAK,EAAE;AAA1E,OAAD,CAE2B;;;;;sEAA3BJ,2B,EAA2B;cAJvC,uDAIuC;eAJ7B;AACTK,kBAAQ,EAAE,oBADD;AAETC,mBAAS,EAAE,CAAC;AAACJ,mBAAO,EAAE,4DAAV;AAAyBC,uBAAW,EAAEH,2BAAtC;AAAmEI,iBAAK,EAAE;AAA1E,WAAD;AAFF,S;AAI6B,Q;AACXL,qBAAa,EAAE,CAAF;gBAAvC,mDAAuC;iBAAjC,kB;AAAiC,SAAE","file":"common-es5.js","sourcesContent":["import { Directive, Input, OnChanges, SimpleChanges } from '@angular/core';\r\nimport { AbstractControl, NG_VALIDATORS, Validator, ValidatorFn, Validators } from '@angular/forms';\r\n\r\n/** A hero's name can't match the given regular expression */\r\nexport function forbiddenNameValidator(nameRe: RegExp): ValidatorFn {\r\n  return (control: AbstractControl): {[key: string]: any} | null => {\r\n    const forbidden = nameRe.test(control.value);\r\n    return forbidden ? {forbiddenName: {value: control.value}} : null;\r\n  };\r\n}\r\n\r\n@Directive({\r\n  selector: '[appForbiddenName]',\r\n  providers: [{provide: NG_VALIDATORS, useExisting: ForbiddenValidatorDirective, multi: true}]\r\n})\r\nexport class ForbiddenValidatorDirective implements Validator {\r\n  @Input('appForbiddenName') forbiddenName: string;\r\n\r\n  validate(control: AbstractControl): {[key: string]: any} | null {\r\n    return this.forbiddenName ? forbiddenNameValidator(new RegExp(this.forbiddenName, 'i'))(control)\r\n                              : null;\r\n  }\r\n}\r\n"]}